package com.infinity.wefriends;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.widget.Toast;

public class NotifierService extends Service {
	
	protected boolean isBound = false;
	protected boolean isFirstlyCreated = true;
	protected RunningThread serviceThread = null;
	protected Socket socket = null;
	protected Context m_context = null;
	protected String wefriendsId = "";
	protected boolean exitSignal = false;
	protected boolean errorMsgSent = false;
	
	public ServiceHandler handler = new ServiceHandler();

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		if (serviceThread == null)
		{
			serviceThread = new RunningThread();
			serviceThread.start();
		}
		return super.onStartCommand(intent, flags, startId);
	}

	@Override
	public IBinder onBind(Intent intent) {
		if (isFirstlyCreated)
			this.startService(intent);
		m_context = getApplicationContext();
		wefriendsId = intent.getStringExtra("wefriendsid");
		isBound = true;
		isFirstlyCreated = false;
		return null;
	}
	
	@Override
	public boolean onUnbind(Intent intent) {
		isBound = false;
		return super.onUnbind(intent);
	}
	
	class RunningThread extends Thread {
		@Override
		public void run() {
			boolean connError;
			byte[] buffer = new byte[10];
			int byteReceived = 0;
			do {
				connError = false;
				try {
					socket = new Socket(m_context.getString(R.string.server_host),Integer.parseInt(m_context.getString(R.string.server_notifier_port)));
					OutputStream output = socket.getOutputStream();
					InputStream input = socket.getInputStream();
					output.write(wefriendsId.getBytes());
					while (true) {
						if ((byteReceived = input.read(buffer)) <0) {
							throw new IOException();
						}
						errorMsgSent = false;
						String receivedStr = new String(buffer, 0, byteReceived);
					}
					
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (UnknownHostException e) {
					e.printStackTrace();
				} catch (IOException e) {
					/*Network Error OR exit signal is sent.*/
					connError = true;
					if ((!errorMsgSent) && (!exitSignal)) {
						Bundle msgBundle = new Bundle();
						msgBundle.putString("text", "NotifierService:" + m_context.getString(R.string.connection_error));
						Message msg = new Message();
						msg.setData(msgBundle);
						handler.sendMessage(msg);
						errorMsgSent = true;
					}
					e.printStackTrace();
				}
			} while (connError && (!exitSignal));
			super.run();
		}
	}
	
	class ServiceHandler extends Handler {
		static public final int SHOWTOAST = 102;
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SHOWTOAST:
				Toast.makeText(m_context, msg.getData().getString("text"), Toast.LENGTH_SHORT).show();
				break;
			}
			super.handleMessage(msg);
		}
		
	}

}
